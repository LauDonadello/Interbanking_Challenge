import { Given, When, Then, setDefaultTimeout, And } from "cucumber";

setDefaultTimeout(60 * 1000 * 2)

import { homePage } from "../../mercadolibre/pages/homePage";
import { filters } from "../../mercadolibre/components/filters";
import { resultsPage } from "../../mercadolibre/pages/resultsPage";
import { productPage } from "../../mercadolibre/pages/productPage";
import { loginPage } from "../../mercadolibre/pages/loginPage";
import assert from "assert";

const KEYWORD = 'iphone 13';
const NUM_MEMORY = '256';
const NO_VALID_MEMORY = '200';
const TITLE_LOGIN = 'Ingresá tu e‑mail, teléfono o usuario de Mercado Libre';

Given('Soy un usuario interesado en comprar un iPhone 13 con un almacenamiento en especifico', async ({ page }) => {
    const home = new homePage(page);
    await home.navigateToHomePage();
});
Given('Soy un usuario interesado en comprar un iPhone 13 con un almacenamiento inexistente en el mercado', async ({ page }) => {
    const home = new homePage(page);
    await home.navigateToHomePage();
});
When('Ingreso al sitio de Mercado Libre', async ({ page }) => {
    const home = new homePage(page);
    await home.clickSearchBar()
    await home.enterkeyword(KEYWORD)
    await home.pressEnter();
});
And('Agrego el filtro segun el almacenamiento buscado', async ({ page }) => {
    const filter = new filters(page);
    const results = new resultsPage(page);
    const product = new productPage(page);
    await filter.clickMinField()
    await filter.enterMinMemory(NUM_MEMORY)
    await filter.clickMaxField()
    await filter.enterMaxMemory(NUM_MEMORY)
    await filter.clickSubmitIntMemory()
    await results.clickMasTarde()
    await results.clickFirstResult()
    await product.clickAddToCart();
});
And('Agrego los filtros segun el almacenamiento buscado y envio gratis', async ({ page }) => {
    const filter = new filters(page);
    const results = new resultsPage(page);
    const product = new productPage(page);
    await filter.clickMinField()
    await filter.enterMinMemory(NUM_MEMORY)
    await filter.clickMaxField()
    await filter.enterMaxMemory(NUM_MEMORY)
    await filter.clickSubmitIntMemory()
    await filter.clickFreeDelivery()
    await results.clickMasTarde()
    await results.clickFirstResult()
    await product.clickAddToCart();
});
Then('Quiero realizar una busqueda personalizada y verificar que puedo comprar el producto pidiendome ingresar mi usuario', async ({ page }) => {
    const login =new loginPage(page);
    await login.clickIngresar();
    assert.equal(await login.getLoginMessage(), TITLE_LOGIN,
    'El mensaje no es:' + TITLE_LOGIN);
});
And('Agrego el filtro para un almacenamiento no existente en el mercado', async ({ page }) => {
    const filter = new filters(page);
    await filter.clickMinField()
    await filter.enterMinMemory(NO_VALID_MEMORY)
    await filter.clickMaxField()
    await filter.enterMaxMemory(NO_VALID_MEMORY)
    await filter.clickSubmitIntMemory();
});
Then('Se espera mensaje de error al no existir el almacenamiento buscado', async ({ page }) => {
    const filter = new filters(page);
    await filter.clickFreeDelivery();
});